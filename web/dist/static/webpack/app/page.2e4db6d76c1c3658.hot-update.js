"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/store/slices/boardSlice.js":
/*!********************************************!*\
  !*** ./src/app/store/slices/boardSlice.js ***!
  \********************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEdge: function() { return /* binding */ addEdge; },\n/* harmony export */   addList: function() { return /* binding */ addList; },\n/* harmony export */   addNode: function() { return /* binding */ addNode; },\n/* harmony export */   addToCausalPath: function() { return /* binding */ addToCausalPath; },\n/* harmony export */   clearCausalPath: function() { return /* binding */ clearCausalPath; },\n/* harmony export */   deleteEdge: function() { return /* binding */ deleteEdge; },\n/* harmony export */   deleteList: function() { return /* binding */ deleteList; },\n/* harmony export */   deleteNode: function() { return /* binding */ deleteNode; },\n/* harmony export */   initializeBoard: function() { return /* binding */ initializeBoard; },\n/* harmony export */   moveNode: function() { return /* binding */ moveNode; },\n/* harmony export */   removeFromCausalPath: function() { return /* binding */ removeFromCausalPath; },\n/* harmony export */   reorderLists: function() { return /* binding */ reorderLists; },\n/* harmony export */   reorderNodes: function() { return /* binding */ reorderNodes; },\n/* harmony export */   setActiveId: function() { return /* binding */ setActiveId; },\n/* harmony export */   setCausalPathFocalNode: function() { return /* binding */ setCausalPathFocalNode; },\n/* harmony export */   setCausalPathMode: function() { return /* binding */ setCausalPathMode; },\n/* harmony export */   setCausalPathNodes: function() { return /* binding */ setCausalPathNodes; },\n/* harmony export */   setDragType: function() { return /* binding */ setDragType; },\n/* harmony export */   setDraggableNodes: function() { return /* binding */ setDraggableNodes; },\n/* harmony export */   setError: function() { return /* binding */ setError; },\n/* harmony export */   setLinkMode: function() { return /* binding */ setLinkMode; },\n/* harmony export */   setLinkSource: function() { return /* binding */ setLinkSource; },\n/* harmony export */   setLoading: function() { return /* binding */ setLoading; },\n/* harmony export */   toggleNodeDraggable: function() { return /* binding */ toggleNodeDraggable; },\n/* harmony export */   updateBoard: function() { return /* binding */ updateBoard; },\n/* harmony export */   updateEdge: function() { return /* binding */ updateEdge; },\n/* harmony export */   updateList: function() { return /* binding */ updateList; },\n/* harmony export */   updateNode: function() { return /* binding */ updateNode; }\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(app-pages-browser)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var _utils_tocModels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/tocModels */ \"(app-pages-browser)/./src/app/utils/tocModels.js\");\n\n\nconst initialState = {\n    board: null,\n    linkMode: false,\n    linkSource: null,\n    activeId: null,\n    dragType: null,\n    draggableNodes: [],\n    causalPathMode: false,\n    causalPathNodes: [],\n    causalPathFocalNode: null,\n    isLoading: false,\n    error: null\n};\nconst boardSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.createSlice)({\n    name: \"board\",\n    initialState,\n    reducers: {\n        // Board initialization\n        initializeBoard: (state, action)=>{\n            state.board = action.payload || (0,_utils_tocModels__WEBPACK_IMPORTED_MODULE_0__.createBoard)();\n            state.isLoading = false;\n            state.error = null;\n        },\n        setLoading: (state, action)=>{\n            state.isLoading = action.payload;\n        },\n        setError: (state, action)=>{\n            state.error = action.payload;\n        },\n        // Board operations\n        updateBoard: (state, action)=>{\n            if (state.board) {\n                state.board = {\n                    ...state.board,\n                    ...action.payload,\n                    updatedAt: new Date().toISOString()\n                };\n            }\n        },\n        // List operations\n        addList: (state, action)=>{\n            if (state.board) {\n                state.board.lists.push(action.payload);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        updateList: (state, action)=>{\n            if (state.board) {\n                const { listId, updates } = action.payload;\n                const listIndex = state.board.lists.findIndex((list)=>list.id === listId);\n                if (listIndex !== -1) {\n                    state.board.lists[listIndex] = {\n                        ...state.board.lists[listIndex],\n                        ...updates\n                    };\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        deleteList: (state, action)=>{\n            if (state.board) {\n                const listId = action.payload;\n                state.board.lists = state.board.lists.filter((list)=>list.id !== listId);\n                // Also remove nodes that belong to this list\n                state.board.nodes = state.board.nodes.filter((node)=>node.listId !== listId);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        reorderLists: (state, action)=>{\n            if (state.board) {\n                const { draggedId, targetId } = action.payload;\n                const lists = [\n                    ...state.board.lists\n                ];\n                const draggedIndex = lists.findIndex((list)=>list.id === draggedId);\n                const targetIndex = lists.findIndex((list)=>list.id === targetId);\n                if (draggedIndex !== -1 && targetIndex !== -1) {\n                    const [draggedList] = lists.splice(draggedIndex, 1);\n                    lists.splice(targetIndex, 0, draggedList);\n                    // Update order for all lists\n                    lists.forEach((list, index)=>{\n                        list.order = index;\n                    });\n                    state.board.lists = lists;\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        // Node operations\n        addNode: (state, action)=>{\n            if (state.board) {\n                state.board.nodes.push(action.payload);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        updateNode: (state, action)=>{\n            if (state.board) {\n                const { nodeId, updates } = action.payload;\n                const nodeIndex = state.board.nodes.findIndex((node)=>node.id === nodeId);\n                if (nodeIndex !== -1) {\n                    state.board.nodes[nodeIndex] = {\n                        ...state.board.nodes[nodeIndex],\n                        ...updates,\n                        updatedAt: new Date().toISOString()\n                    };\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        deleteNode: (state, action)=>{\n            if (state.board) {\n                const nodeId = action.payload;\n                state.board.nodes = state.board.nodes.filter((node)=>node.id !== nodeId);\n                // Also remove edges connected to this node\n                state.board.edges = state.board.edges.filter((edge)=>edge.sourceId !== nodeId && edge.targetId !== nodeId);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        reorderNodes: (state, action)=>{\n            if (state.board) {\n                const { listId, draggedId, targetId } = action.payload;\n                const listNodes = state.board.nodes.filter((node)=>node.listId === listId);\n                const draggedIndex = listNodes.findIndex((node)=>node.id === draggedId);\n                const targetIndex = listNodes.findIndex((node)=>node.id === targetId);\n                if (draggedIndex !== -1 && targetIndex !== -1) {\n                    const [draggedNode] = listNodes.splice(draggedIndex, 1);\n                    listNodes.splice(targetIndex, 0, draggedNode);\n                    // Update order for all nodes in the list\n                    listNodes.forEach((node, index)=>{\n                        const nodeIndex = state.board.nodes.findIndex((n)=>n.id === node.id);\n                        if (nodeIndex !== -1) {\n                            state.board.nodes[nodeIndex].order = index;\n                        }\n                    });\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        moveNode: (state, action)=>{\n            if (state.board) {\n                const { nodeId, targetListId, position } = action.payload;\n                const nodeIndex = state.board.nodes.findIndex((node)=>node.id === nodeId);\n                if (nodeIndex !== -1) {\n                    state.board.nodes[nodeIndex].listId = targetListId;\n                    // Update order for nodes in both lists\n                    const targetListNodes = state.board.nodes.filter((node)=>node.listId === targetListId);\n                    targetListNodes.forEach((node, index)=>{\n                        const nIndex = state.board.nodes.findIndex((n)=>n.id === node.id);\n                        if (nIndex !== -1) {\n                            state.board.nodes[nIndex].order = index;\n                        }\n                    });\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        // Edge operations\n        addEdge: (state, action)=>{\n            if (state.board) {\n                state.board.edges.push(action.payload);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        updateEdge: (state, action)=>{\n            if (state.board) {\n                const { edgeId, updates } = action.payload;\n                const edgeIndex = state.board.edges.findIndex((edge)=>edge.id === edgeId);\n                if (edgeIndex !== -1) {\n                    state.board.edges[edgeIndex] = {\n                        ...state.board.edges[edgeIndex],\n                        ...updates\n                    };\n                    state.board.updatedAt = new Date().toISOString();\n                }\n            }\n        },\n        deleteEdge: (state, action)=>{\n            if (state.board) {\n                const edgeId = action.payload;\n                state.board.edges = state.board.edges.filter((edge)=>edge.id !== edgeId);\n                state.board.updatedAt = new Date().toISOString();\n            }\n        },\n        // UI state operations\n        setLinkMode: (state, action)=>{\n            state.linkMode = action.payload;\n        },\n        setLinkSource: (state, action)=>{\n            state.linkSource = action.payload;\n        },\n        setActiveId: (state, action)=>{\n            state.activeId = action.payload;\n        },\n        setDragType: (state, action)=>{\n            state.dragType = action.payload;\n        },\n        setDraggableNodes: (state, action)=>{\n            state.draggableNodes = action.payload;\n        },\n        toggleNodeDraggable: (state, action)=>{\n            const { nodeId, isDraggable } = action.payload;\n            if (isDraggable) {\n                if (!state.draggableNodes.includes(nodeId)) {\n                    state.draggableNodes.push(nodeId);\n                }\n            } else {\n                state.draggableNodes = state.draggableNodes.filter((id)=>id !== nodeId);\n            }\n        },\n        setCausalPathMode: (state, action)=>{\n            state.causalPathMode = action.payload;\n        },\n        setCausalPathNodes: (state, action)=>{\n            state.causalPathNodes = action.payload;\n        },\n        setCausalPathFocalNode: (state, action)=>{\n            state.causalPathFocalNode = action.payload;\n        },\n        addToCausalPath: (state, action)=>{\n            const newSet = new Set(state.causalPathNodes);\n            newSet.add(action.payload);\n            state.causalPathNodes = newSet;\n        },\n        removeFromCausalPath: (state, action)=>{\n            const newSet = new Set(state.causalPathNodes);\n            newSet.delete(action.payload);\n            state.causalPathNodes = newSet;\n        },\n        clearCausalPath: (state)=>{\n            state.causalPathNodes = new Set();\n            state.causalPathFocalNode = null;\n            state.causalPathMode = false;\n        }\n    }\n});\nconst { initializeBoard, setLoading, setError, updateBoard, addList, updateList, deleteList, reorderLists, addNode, updateNode, deleteNode, reorderNodes, moveNode, addEdge, updateEdge, deleteEdge, setLinkMode, setLinkSource, setActiveId, setDragType, setDraggableNodes, toggleNodeDraggable, setCausalPathMode, setCausalPathNodes, setCausalPathFocalNode, addToCausalPath, removeFromCausalPath, clearCausalPath } = boardSlice.actions;\n/* harmony default export */ __webpack_exports__[\"default\"] = (boardSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/store/slices/boardSlice.js\n"));

/***/ })

});